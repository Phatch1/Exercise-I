# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dnKJXAB6Z2yB3sGWLicZOEGlJ1ySWYVc
"""

import numpy as np
from scipy import optimize as opt
import time

x0 = np.array([-2.,2.])

def rosen(xn):
  res=(1.-xn[0])**2+100*(xn[1]-xn[0]**2)**2
  return res

def print_TH():
  print('-'*63)
  print(f"iter{' '*5}\tx{' '*10}\ty{' '*10}\tfunction rosen")
  print('-'*63)

def print_TD(el):
  global i
  print(f"|{i:5d} |\t{el[0]:10f}|\t{el[1]:10f}|\t{rosen(el):14f}|")
  i+=1
  
#default: method='BFGS' Broyden–Fletcher–Goldfarb–Shanno
print(f"{'#'*5} BFGS Report {'#'*5}")
t0 = time.time()
i = 1
print_TH()
res0 = opt.minimize(rosen, x0, callback = print_TD, method='BFGS', tol=1e-7, options={'disp':True})
print('Method = BFGS, E-time = ',time.time()-t0,'\n')
print(res0.x,"\n")


print(f"\n\n\n{'#'*5} Nelder-Mead Report {'#'*5}")
t0 = time.time()
i = 1
print_TH()
res1 = opt.minimize(rosen, x0, callback = print_TD, method = 'Nelder-Mead', tol=1e-7, options={'disp':True})
print('Method = Nelder-Mead, E-time = ',time.time()-t0,'\n')
print(res1.x,"\n")


print(f"\n\n\n{'#'*5} Newton-CG Report {'#'*5}")
t0 = time.time()
i = 1
print_TH()
res2 = opt.minimize(opt.rosen, x0, callback = print_TD, method='Newton-CG', tol=1e-7,
jac=opt.rosen_der, hess=opt.rosen_hess, options={'disp':True})
print('Method = Newton-CG; E-time = ',time.time()-t0)
print(res2.x,"\n")

import numpy as np
from scipy import optimize as opt

x0 = np.array([-2.,2.])

data = np.array([])
data_x = np.array([])
data_y = np.array([])

def rosen(xn):
  res=(1.-xn[0])**2+100*(xn[1]-xn[0]**2)**2
  return res

def append(el):
  global data, data_x, data_y
  data = np.append(data, el)
  data_x = np.append(data_x, el[0])
  data_y = np.append(data_y, el[1])


res1 = opt.minimize(rosen, x0,callback=append, method = 'Nelder-Mead', tol=1e-7, options={'disp':False})

print(f"{'#'*5} Nelder-Mead Data {'#'*5}")
print(f"\n{'-'*30} data for x {'-'*30}\n")
print(data_x)
print(f"\n\n{'-'*30} data for y {'-'*30}\n")
print(data_y)
print(f"\n\n{'-'*27} all data(x and y) {'-'*27}\n")
print(data)

import numpy as np
from scipy import optimize as opt
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

x0 = np.array([-2.,2.])

data_x = np.array([])
data_y = np.array([])

def rosen(xn):
  res=(1.-xn[0])**2+100*(xn[1]-xn[0]**2)**2
  return res

def append(el):
  global data_x, data_y
  data_x = np.append(data_x, el[0])
  data_y = np.append(data_y, el[1])


print(f"{'#'*5} Nelder-Mead Data {'#'*5}\n\n")
res1 = opt.minimize(rosen, x0,callback=append, method = 'Nelder-Mead', tol=1e-7, options={'disp':True})
print('\n')


ax, ay = np.meshgrid(data_x, data_y)
az = rosen([ax, ay])











plt.figure(figsize=(10,5))
plt.xlim([-2.0, 1.5])
plt.ylim([-1.0, 2.5])
plt.plot(data_x, data_y, 'ro-')
plt.contour(data_x, data_y, az, 50)
plt.autoscale()
plt.title("A contour of rosen function")
plt.show()

import numpy as np
from scipy import optimize as opt
import time
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

x0 = np.array([-2.,2.])

def rosen(xn):
  res=(1.-xn[0])**2+100*(xn[1]-xn[0]**2)**2
  return res

def print_TH():
  print('-'*63)
  print(f"iter{' '*5}\tx{' '*10}\ty{' '*10}\tfunction rosen")
  print('-'*63)

def append_and_append(el):
  global i, data_x, data_y
  data_x = np.append(data_x, el[0])
  data_y = np.append(data_y, el[1])
 
  print(f"|{i:5d} |\t{el[0]:10f}|\t{el[1]:10f}|\t{rosen(el):14f}|")
  i+=1

# ---------
# BFGS
# ---------
print(f"{'#'*5} BFGS Report {'#'*5}")

data_x = np.array([])
data_y = np.array([])

t0 = time.time()
i = 1
print_TH()
res0 = opt.minimize(rosen, x0,callback=append_and_append, method='BFGS', tol=1e-7, options={'disp':True})
print('Method = BFGS, E-time = ',time.time()-t0,'\n')
print(res0.x,"\n")

ax, ay = np.meshgrid(data_x, data_y)
az = rosen([ax, ay])

plt.figure(figsize=(10,5))
plt.xlim([-2.0, 1.5])
plt.ylim([-1.0, 2.5])
plt.plot(data_x, data_y, 'ro-')
plt.contour(data_x, data_y, az, 50)
plt.autoscale()
plt.title("A contour of rosen function")
plt.show()

# ---------
# NM
# ---------
print(f"\n\n\n\n\n{'#'*5} Nelder-Mead Report {'#'*5}")

data_x = np.array([])
data_y = np.array([])

t0 = time.time()
i = 1
print_TH()
res1 = opt.minimize(rosen, x0,callback=append_and_append, method = 'Nelder-Mead', tol=1e-7, options={'disp':True})
print('Method = Nelder-Mead, E-time = ',time.time()-t0,'\n')
print(res1.x,"\n")

ax, ay = np.meshgrid(data_x, data_y)
az = rosen([ax, ay])

plt.figure(figsize=(10,5))
plt.xlim([-2.0, 1.5])
plt.ylim([-1.0, 2.5])
plt.plot(data_x, data_y, 'ro-')
plt.contour(data_x, data_y, az, 50)
plt.autoscale()
plt.title("A contour of rosen function")
plt.show()

# ---------
# NCG
# ---------
print(f"\n\n\n\n\n{'#'*5} Newton-CG Report {'#'*5}")

data_x = np.array([])
data_y = np.array([])

t0 = time.time()

i = 1


print_TH()
res2 = opt.minimize(opt.rosen, x0,callback=append_and_append, method='Newton-CG', tol=1e-7,
jac=opt.rosen_der, hess=opt.rosen_hess, options={'disp':True})
print('Method = Newton-CG; E-time = ',time.time()-t0)
print(res2.x,"\n")



ax, ay = np.meshgrid(data_x, data_y)
az = rosen([ax, ay])

plt.figure(figsize=(10,5))
plt.xlim([-2.0, 1.5])
plt.ylim([-1.0, 2.5])
plt.plot(data_x, data_y, 'ro-')
plt.contour(data_x, data_y, az, 50)
plt.autoscale()
plt.title("A contour of rosen function")
plt.show()